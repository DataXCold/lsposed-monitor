# .github/workflows/monitor_lsposed.yml

name: Monitor LSPosed Artifacts

permissions:
  actions: read
  contents: read

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

on:
  schedule:
    # Runs every 15 minutes to check for new artifacts
    - cron: "*/15 * * * *"
  workflow_dispatch:
    inputs:
      force_notification:
        description: 'Force send notification even if no new commit'
        required: false
        default: false
        type: boolean

env:
  TARGET_REPO: "JingMatrix/LSPosed"
  CACHE_VERSION: "v2"

jobs:
  check-for-artifacts:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore last notified commit from cache
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: .github/tracking/last_commit_id.txt
          key: ${{ runner.os }}-lsposed-monitor-${{ env.CACHE_VERSION }}

      - name: Create tracking directory
        run: mkdir -p .github/tracking

      - name: Fetch latest successful workflow run
        id: fetch_run
        env:
          GH_TOKEN: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          echo "🔍 Fetching latest successful workflow run from ${{ env.TARGET_REPO }}..."
          
          # Initialize variables
          response=""
          
          for attempt in {1..3}; do
            echo "Attempt $attempt/3"
            
            # Use more specific API parameters and better error handling
            if api_output=$(gh api "repos/${{ env.TARGET_REPO }}/actions/runs" \
              --method GET \
              --field status=success \
              --field per_page=1 \
              --field page=1 \
              --jq '.workflow_runs[0]' 2>&1); then
              
              # Validate that we got a valid response
              if [ "$api_output" != "null" ] && [ -n "$api_output" ]; then
                response="$api_output"
                echo "✅ Successfully fetched workflow run data"
                break
              else
                echo "⚠️ API returned null or empty response"
              fi
            else
              echo "❌ API call failed: $api_output"
            fi
            
            if [ $attempt -eq 3 ]; then
              echo "❌ Failed to fetch workflow runs after 3 attempts."
              echo "status=api_error" >> "$GITHUB_OUTPUT"
              exit 0
            fi
            
            echo "⏳ Retrying in 5 seconds..."
            sleep 5
          done

          # Validate response structure before parsing
          if ! echo "$response" | jq -e '. | has("id") and has("head_sha")' >/dev/null 2>&1; then
            echo "❌ API response missing required fields (id, head_sha)"
            echo "Response: $response"
            echo "status=invalid_response" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Parse response with better error handling
          if ! run_data=$(echo "$response" | jq -r '[.id, .head_sha, .html_url, .created_at, .workflow_id] | @tsv'); then
            echo "❌ Failed to parse workflow run data"
            echo "status=parse_error" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Read parsed data into variables
          IFS=$'\t' read -r run_id commit_sha run_url created_at workflow_id <<< "$run_data"

          # Validate parsed data
          if [ -z "$run_id" ] || [ "$run_id" = "null" ] || [ -z "$commit_sha" ] || [ "$commit_sha" = "null" ]; then
            echo "❌ Parsed data is invalid or empty"
            echo "Run ID: '$run_id', Commit SHA: '$commit_sha'"
            echo "status=invalid_data" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Validate that run_id is numeric
          if ! [[ "$run_id" =~ ^[0-9]+$ ]]; then
            echo "❌ Run ID is not numeric: '$run_id'"
            echo "status=invalid_run_id" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Validate commit SHA format (40 character hex string)
          if ! [[ "$commit_sha" =~ ^[a-f0-9]{40}$ ]]; then
            echo "❌ Commit SHA has invalid format: '$commit_sha'"
            echo "status=invalid_commit_sha" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "✅ Successfully parsed workflow run data:"
          echo "  Run ID: $run_id"
          echo "  Commit SHA: $commit_sha"
          echo "  Created: $created_at"

          # Output to GitHub Actions
          {
            echo "commit_sha=$commit_sha"
            echo "run_id=$run_id"
            echo "run_url=$run_url"
            echo "commit_short=$(echo "$commit_sha" | cut -c1-7)"
            echo "created_at=$created_at"
            echo "workflow_id=$workflow_id"
            echo "status=success"
          } >> "$GITHUB_OUTPUT"

      - name: Check for artifacts in workflow run
        id: check_artifacts
        if: steps.fetch_run.outputs.status == 'success'
        env:
          GH_TOKEN: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          
          run_id="${{ steps.fetch_run.outputs.run_id }}"
          echo "🔍 Checking for artifacts in run ID: $run_id"
          
          # Validate run_id before using it
          if ! [[ "$run_id" =~ ^[0-9]+$ ]]; then
            echo "❌ Invalid run_id format: '$run_id'"
            echo "has_artifacts=error" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          
          artifacts_response=""
          for attempt in {1..3}; do
            echo "Attempt $attempt/3 to fetch artifacts"
            
            if artifacts_output=$(gh api "repos/${{ env.TARGET_REPO }}/actions/runs/${run_id}/artifacts" --jq '.artifacts' 2>&1); then
              if [ "$artifacts_output" != "null" ] && [ -n "$artifacts_output" ]; then
                artifacts_response="$artifacts_output"
                break
              fi
            else
              echo "⚠️ API call failed: $artifacts_output"
            fi
            
            if [ $attempt -eq 3 ]; then
              echo "❌ Failed to fetch artifacts after 3 attempts."
              echo "has_artifacts=error" >> "$GITHUB_OUTPUT"
              exit 0
            fi
            echo "⏳ Retrying in 3 seconds..."
            sleep 3
          done
          
          # Validate artifacts response
          if ! artifact_count=$(echo "$artifacts_response" | jq 'length' 2>/dev/null); then
            echo "❌ Failed to parse artifacts count"
            echo "has_artifacts=error" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          
          echo "📦 Found $artifact_count artifacts."
          
          if [ "$artifact_count" -gt 0 ]; then
            echo "has_artifacts=true" >> "$GITHUB_OUTPUT"
            echo "artifact_count=$artifact_count" >> "$GITHUB_OUTPUT"
            
            # Get artifact names with better error handling
            if artifact_names=$(echo "$artifacts_response" | jq -r '.[].name' | head -5 | tr '\n' ',' | sed 's/,$//'); then
              if [ "$artifact_count" -gt 5 ]; then
                echo "artifact_names=${artifact_names}, and $((artifact_count - 5)) more..." >> "$GITHUB_OUTPUT"
              else
                echo "artifact_names=$artifact_names" >> "$GITHUB_OUTPUT"
              fi
            else
              echo "artifact_names=Failed to parse artifact names" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "has_artifacts=false" >> "$GITHUB_OUTPUT"
            echo "ℹ️ No artifacts found in this workflow run."
          fi

      - name: Check if notification is needed
        id: check_notification
        if: steps.fetch_run.outputs.status == 'success' && steps.check_artifacts.outputs.has_artifacts == 'true'
        run: |
          current_commit="${{ steps.fetch_run.outputs.commit_sha }}"
          force_notify="${{ github.event.inputs.force_notification || 'false' }}"
          
          # Validate current commit
          if [ -z "$current_commit" ] || ! [[ "$current_commit" =~ ^[a-f0-9]{40}$ ]]; then
            echo "❌ Invalid current commit format: '$current_commit'"
            echo "should_notify=false" >> "$GITHUB_OUTPUT"
            echo "reason=Invalid commit format" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          
          # Read the commit SHA from the last successful notification
          prev_commit=$(cat .github/tracking/last_commit_id.txt 2>/dev/null | tr -d '\n\r' || echo "")
          
          echo "📊 Comparison:"
          echo "  Current Commit: $current_commit"
          echo "  Previous Commit: $prev_commit"
          echo "  Force Notify: $force_notify"
          
          if [ "$force_notify" = "true" ]; then
            echo "should_notify=true" >> "$GITHUB_OUTPUT"
            echo "reason=Manual trigger (force notification)" >> "$GITHUB_OUTPUT"
          elif [ -z "$prev_commit" ]; then
            echo "should_notify=true" >> "$GITHUB_OUTPUT"
            echo "reason=First run with artifacts" >> "$GITHUB_OUTPUT"
          elif [ "$current_commit" != "$prev_commit" ]; then
            echo "should_notify=true" >> "$GITHUB_OUTPUT"
            echo "reason=New commit detected" >> "$GITHUB_OUTPUT"
          else
            echo "should_notify=false" >> "$GITHUB_OUTPUT"
            echo "reason=Already notified for this commit" >> "$GITHUB_OUTPUT"
          fi

      - name: Update tracking data
        if: steps.check_notification.outputs.should_notify == 'true'
        run: |
          current_commit="${{ steps.fetch_run.outputs.commit_sha }}"
          echo "✅ Updating tracking data for commit: $current_commit"
          echo -n "$current_commit" > .github/tracking/last_commit_id.txt
          
          # Verify the file was written correctly
          written_commit=$(cat .github/tracking/last_commit_id.txt)
          if [ "$written_commit" = "$current_commit" ]; then
            echo "✅ Tracking file updated successfully"
          else
            echo "❌ Tracking file update failed. Expected: $current_commit, Got: $written_commit"
          fi

      - name: Save tracking data to cache
        if: steps.check_notification.outputs.should_notify == 'true'
        uses: actions/cache/save@v4
        with:
          path: .github/tracking/last_commit_id.txt
          key: ${{ runner.os }}-lsposed-monitor-${{ env.CACHE_VERSION }}

      - name: Send Telegram notification
        if: steps.check_notification.outputs.should_notify == 'true'
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: |
            🔔 *New LSPosed Artifact Available!*
            
            📦 *Repository*: `${{ env.TARGET_REPO }}`
            ✅ *Commit*: `${{ steps.fetch_run.outputs.commit_short }}`
            📅 *Build Date*: ${{ steps.fetch_run.outputs.created_at }}
            
            🎯 *Artifacts*: ${{ steps.check_artifacts.outputs.artifact_count }} files available
            📝 *Files*: ${{ steps.check_artifacts.outputs.artifact_names }}
            
            🔗 [Download from GitHub Actions](${{ steps.fetch_run.outputs.run_url }})
            
            _Reason: ${{ steps.check_notification.outputs.reason }}_

      - name: Log workflow summary
        if: always()
        run: |
          echo "## 📊 LSPosed Monitor Summary" >> $GITHUB_STEP_SUMMARY
          
          case "${{ steps.fetch_run.outputs.status }}" in
            "success")
              echo "✅ **Status**: Successfully checked for new artifacts." >> $GITHUB_STEP_SUMMARY
              echo "* **Latest Run**: [${{ steps.fetch_run.outputs.run_id }}](${{ steps.fetch_run.outputs.run_url }})" >> $GITHUB_STEP_SUMMARY
              echo "* **Commit**: \`${{ steps.fetch_run.outputs.commit_short }}\`" >> $GITHUB_STEP_SUMMARY
              
              case "${{ steps.check_artifacts.outputs.has_artifacts }}" in
                "true")
                  echo "* **Artifacts**: ${{ steps.check_artifacts.outputs.artifact_count }} found" >> $GITHUB_STEP_SUMMARY
                  if [ "${{ steps.check_notification.outputs.should_notify }}" = "true" ]; then
                    echo "🔔 **Notification**: Sent" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "🔕 **Notification**: Skipped" >> $GITHUB_STEP_SUMMARY
                  fi
                  echo "* **Reason**: ${{ steps.check_notification.outputs.reason }}" >> $GITHUB_STEP_SUMMARY
                  ;;
                "false")
                  echo "📦 **Artifacts**: None found in the latest successful run." >> $GITHUB_STEP_SUMMARY
                  ;;
                "error")
                  echo "❌ **Artifacts**: Failed to fetch artifact information." >> $GITHUB_STEP_SUMMARY
                  ;;
              esac
              ;;
            "api_error")
              echo "❌ **Status**: Failed to fetch workflow run data (API error)." >> $GITHUB_STEP_SUMMARY
              ;;
            "invalid_response")
              echo "❌ **Status**: API returned invalid response structure." >> $GITHUB_STEP_SUMMARY
              ;;
            "parse_error")
              echo "❌ **Status**: Failed to parse workflow run data." >> $GITHUB_STEP_SUMMARY
              ;;
            "invalid_data")
              echo "❌ **Status**: Parsed data validation failed." >> $GITHUB_STEP_SUMMARY
              ;;
            "invalid_run_id")
              echo "❌ **Status**: Run ID format validation failed." >> $GITHUB_STEP_SUMMARY
              ;;
            "invalid_commit_sha")
              echo "❌ **Status**: Commit SHA format validation failed." >> $GITHUB_STEP_SUMMARY
              ;;
            *)
              echo "❌ **Status**: Unknown error occurred." >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Last checked: $(date -u '+%Y-%m-%d %H:%M:%S UTC')_" >> $GITHUB_STEP_SUMMARY
